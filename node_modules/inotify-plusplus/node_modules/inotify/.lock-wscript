argv = ['/usr/bin/node-waf', 'configure', 'build']
blddir = '/home/james/dev/perv/node_modules/inotify-plusplus/node_modules/inotify/build'
commands = {'dist': 0, 'configure': True, 'distcheck': 0, 'install': 0, 'build': True, 'clean': 0, 'distclean': 0, 'check': 0, 'uninstall': 0}
cwd = '/home/james/dev/perv/node_modules/inotify-plusplus/node_modules/inotify'
environ = {'npm_config_color': 'true', 'npm_config_engine_strict': '', 'npm_config_searchopts': '', 'npm_config_save_bundle': '', 'npm_package_contributors_3_name': 'Yannick Croissant - http://yannick.cr/', 'npm_config_group': '1010', 'npm_config_browser': '', 'npm_config_global': '', 'npm_package_main': 'inotify', 'SHELL': '/bin/bash', 'npm_config_pre': '', 'npm_config_tmp': '/home/james/tmp', 'npm_package_engines_node': '0.8', 'npm_config_argv': '{"remain":["inotify-plusplus"],"cooked":["install","inotify-plusplus"],"original":["install","inotify-plusplus"]}', 'npm_config_cache_lock_wait': '10000', 'npm_config_fetch_retry_factor': '10', 'npm_config_save_dev': '', 'npm_config_optional': 'true', 'npm_config_init_version': '0.0.0', 'npm_config_user_agent': 'node/v0.8.12', 'npm_lifecycle_event': 'install', 'npm_config_init_author_name': '', 'npm_config_yes': '', 'npm_config_usage': '', 'npm_package_description': 'inotify bindings for v8 javascript engine', 'npm_config_shell': '/bin/bash', 'MAIL': '/var/mail/james', 'SSH_CONNECTION': '192.168.1.170 57759 192.168.1.141 22', 'npm_config_ignore': '', 'npm_config_globalconfig': '/usr/etc/npmrc', 'npm_package_contributors_2_email': 'bingalls at compete.com', 'npm_config_parseable': '', 'npm_package_contributors_1_email': 'jerry at edagames.com', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'npm_config_userignorefile': '/home/james/.npmignore', 'USER': 'james', 'npm_package_author_name': 'Camilo Aguilar', 'npm_config_versions': '', 'LANGUAGE': 'en_AU:en', 'SHLVL': '1', 'npm_config_cache_lock_stale': '60000', 'npm_config_init_author_url': '', 'npm_config_fetch_retry_maxtimeout': '60000', 'npm_config_unsafe_perm': 'true', 'npm_config_cache': '/home/james/.npm', 'npm_config_proxy': '', 'npm_config_depth': 'null', 'npm_config_umask': '18', 'npm_package_contributors_4_name': 'Michael Boe', 'npm_config_long': '', 'npm_package_contributors_0_name': 'Camilo Aguilar', 'npm_config_editor': 'vi', 'npm_config_prefix': '/usr', 'npm_package_repository_type': 'git', 'npm_package_contributors_1_name': 'J\xc3\xa9r\xc3\xa9my Lal', 'npm_config_npat': '', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:', 'npm_config_init_module': '/home/james/.npm-init.js', 'npm_config_json': '', 'npm_config_searchsort': 'name', 'npm_config_user': '', 'npm_lifecycle_script': 'node-waf configure build', 'npm_config_git': 'git', 'npm_package_readme': '"# Node-inotify - monitoring file system events in Gnu/Linux with [NodeJS][nodejs_home]\\nThe inotify API provides a mechanism for monitoring file system events.\\nInotify can be used to monitor individual files, or to monitor directories.\\nWhen a directory is monitored, inotify will return events for the directory\\nitself, and for files inside the directory. [(ref: GNU/Linux Manual)][inotify.7]\\n\\n## Installation\\nYou must have [NodeJS][nodejs_dev] already installed to be able to build node-inotify. Versions 0.4.x, 0.5.x, 0.6.0 and 0.8.2 of\\n[NodeJS][nodejs_dev] are currently supported and tested.\\n\\n    $ git clone git://github.com/c4milo/node-inotify.git\\n    $ cd node-inotify\\n    $ node-waf configure build\\n\\n### Easy way\\n    $ npm install inotify\\n\\n## API\\n  * `var inotify = new Inotify()`: Create a new instance of Inotify. By default it\'s in persistent mode.\\n  You can specify `false` in `var inotify = new Inotify(false)` to use the non persistent mode.\\n\\n  * `var wd = inotify.addWatch(arg)`:  Add a watch for files or directories. This will then return a watch descriptor. The argument is an object as follows\\n        var arg = { path: \'path to be monitored\',\\n                    watch_for: an optional OR\'ed set of events to watch for.\\n                               If they\'re not specified, it will use\\n                               Inotify.IN_ALL_EVENTS by default,\\n                    callback: Callback function that will receive each event.\\n        }\\nYou can call this function as many times as you want to monitor different paths.\\n**Inotify monitoring of directories is not recursive**: to monitor subdirectories\\nunder a directory, additional watches must be created.\\n\\n  * `inotify.removeWatch(watch_descriptor)`: Remove a watch associated with the watch_descriptor param and returns `true` if the action was succesful or `false` in the opposite case. Removing a watch cause an `Inotify.IN_IGNORED` event to be generated for this watch descriptor.\\n\\n  * `inotify.close()`: Remove all the watches and close the inotify\'s file descriptor. Returns `true` if the action was succesful or false in the opposite case.\\n\\n### Event object structure\\n```javascript\\n    var event = {   watch: Watch descriptor,\\n                    mask: Mask of events,\\n                    cookie: Cookie that permits to associate events,\\n                    name: Optional name of the object being watched\\n                };\\n```\\n\\nThe `event.name` property is only present when an event is returned for a file inside a\\nwatched directory; it identifies the file pathname relative to the watched\\ndirectory.\\n\\n\\n## Example of use\\n\\n```javascript\\n    var Inotify = require(\'inotify\').Inotify;\\n    var inotify = new Inotify(); //persistent by default, new Inotify(false) //no persistent\\n\\n    var data = {}; //used to correlate two events\\n\\n    var callback = function(event) {\\n        var mask = event.mask;\\n        var type = mask & Inotify.IN_ISDIR ? \'directory \' : \'file \';\\n        event.name ? type += \' \' + event.name + \' \': \' \';\\n\\n        //the porpuse of this hell of \'if\'\\n        //statements is only illustrative.\\n\\n        if(mask & Inotify.IN_ACCESS) {\\n            console.log(type + \'was accessed \');\\n        } else if(mask & Inotify.IN_MODIFY) {\\n            console.log(type + \'was modified \');\\n        } else if(mask & Inotify.IN_OPEN) {\\n            console.log(type + \'was opened \');\\n        } else if(mask & Inotify.IN_CLOSE_NOWRITE) {\\n            console.log(type + \' opened for reading was closed \');\\n        } else if(mask & Inotify.IN_CLOSE_WRITE) {\\n            console.log(type + \' opened for writing was closed \');\\n        } else if(mask & Inotify.IN_ATTRIB) {\\n            console.log(type + \'metadata changed \');\\n        } else if(mask & Inotify.IN_CREATE) {\\n            console.log(type + \'created\');\\n        } else if(mask & Inotify.IN_DELETE) {\\n            console.log(type + \'deleted\');\\n        } else if(mask & Inotify.IN_DELETE_SELF) {\\n            console.log(type + \'watched deleted \');\\n        } else if(mask & Inotify.IN_MOVE_SELF) {\\n            console.log(type + \'watched moved\');\\n        } else if(mask & Inotify.IN_IGNORED) {\\n            console.log(type + \'watch was removed\');\\n        } else if(mask & Inotify.IN_MOVED_FROM) {\\n            data = event;\\n            data.type = type;\\n        } else if(mask & Inotify.IN_MOVED_TO) {\\n            if( Object.keys(data).length &&\\n                data.cookie === event.cookie) {\\n                console.log(type + \' moved to \' + data.type);\\n                data = {};\\n            }\\n        }\\n    }\\n    var home_dir = { path:      \'/home/camilo\', // <--- change this for a valid directory in your machine.\\n                     watch_for: Inotify.IN_OPEN | Inotify.IN_CLOSE,\\n                     callback:  callback\\n                  };\\n\\n    var home_watch_descriptor = inotify.addWatch(home_dir);\\n\\n    var home2_dir = { path:      \'/home/bob\', // <--- change this for a valid directory in your machine\\n                      watch_for: Inotify.IN_ALL_EVENTS,\\n                      callback:  callback\\n                  };\\n\\n    var home2_wd = inotify.addWatch(home2_dir);\\n\\n```\\n\\n## Inotify Events\\n\\n### Watch for:\\n * **Inotify.IN_ACCESS:** File was accessed (read)\\n * **Inotify.IN_ATTRIB:** Metadata changed, e.g., permissions, timestamps, extended attributes, link count (since Linux 2.6.25), UID, GID, etc.\\n * **Inotify.IN_CLOSE_WRITE:** File opened for writing was closed\\n * **Inotify.IN_CLOSE_NOWRITE:** File not opened for writing was closed\\n * **Inotify.IN_CREATE:** File/directory created in the watched directory\\n * **Inotify.IN_DELETE:** File/directory deleted from the watched directory\\n * **Inotify.IN_DELETE_SELF:** Watched file/directory was deleted\\n * **Inotify.IN_MODIFY:** File was modified\\n * **Inotify.IN_MOVE_SELF:** Watched file/directory was moved\\n * **Inotify.IN_MOVED_FROM:** File moved out of the watched directory\\n * **Inotify.IN_MOVED_TO:** File moved into watched directory\\n * **Inotify.IN_OPEN:** File was opened\\n * **Inotify.IN_ALL_EVENTS:** Watch for all kind of events\\n * **Inotify.IN_CLOSE:**  (IN_CLOSE_WRITE | IN_CLOSE_NOWRITE)  Close\\n * **Inotify.IN_MOVE:**  (IN_MOVED_FROM | IN_MOVED_TO)  Moves\\n\\n### Additional Flags:\\n * **Inotify.IN_ONLYDIR:** Only watch the path if it is a directory.\\n * **Inotify.IN_DONT_FOLLOW:** Do not follow symbolics links\\n * **Inotify.IN_ONESHOT:** Only send events once\\n * **Inotify.IN_MASK_ADD:** Add (OR) events to watch mask for this pathname if it already exists (instead of replacing the mask).\\n\\n### The following bits may be set in the `event.mask` property returned in the callback\\n * **Inotify.IN_IGNORED:** Watch was removed explicitly with inotify.removeWatch(watch_descriptor) or automatically (the file was deleted, or the file system was unmounted)\\n * **Inotify.IN_ISDIR:** Subject of this event is a directory\\n * **Inotify.IN_Q_OVERFLOW:** Event queue overflowed (wd is -1 for this event)\\n * **Inotify.IN_UNMOUNT:** File system containing the watched object was unmounted\\n\\n\\n\\n## License\\n(The MIT License)\\n\\nCopyright 2012 Camilo Aguilar. All rights reserved.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\"Software\\"), to\\ndeal in the Software without restriction, including without limitation the\\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\nsell copies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\nIN THE SOFTWARE.\\n\\n\\n[inotify.7]: http://www.kernel.org/doc/man-pages/online/pages/man7/inotify.7.html \\"http://www.kernel.org/doc/man-pages/online/pages/man7/inotify.7.html\\"\\n[nodejs_home]: http://www.nodejs.org\\n[nodejs_dev]: http://github.com/ry/node\\n[code_example]: http://gist.github.com/476119\\n\\n"', 'npm_config_rollback': 'true', 'npm_package_repository_url': 'http://github.com/c4milo/node-inotify', 'LC_ALL': '', 'HOME': '/home/james', 'npm_config_save_optional': '', 'LANG': '', 'npm_config_save': '', 'npm_config_registry': 'https://registry.npmjs.org/', 'npm_config_unicode': 'true', 'npm_config_production': '', 'npm_config_message': '%s', 'npm_config_always_auth': '', '_': '/usr/bin/npm', 'npm_config_searchexclude': '', 'npm_config_loglevel': 'http', 'npm_config_cache_lock_retries': '10', 'npm_config_strict_ssl': 'true', 'npm_package_keywords_2': 'monitor', 'npm_package_keywords_3': 'watch files', 'npm_package_keywords_0': 'inotify', 'npm_package_keywords_1': 'watch', 'npm_package_email': 'camilo@cloudescape.com', 'npm_package_keywords_4': 'watch directories', 'npm_package_contributors_2_name': 'Brian Ingalls', 'npm_package_contributors_5_email': 'estliberitas at gmail.com', 'npm_config_tag': 'latest', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'SSH_TTY': '/dev/pts/16', 'npm_config_rebuild_bundle': 'true', 'npm_config_version': '', 'npm_package_contributors_0_email': 'camilo at cloudescape.com', 'npm_config_force': '', 'npm_config_username': '', 'npm_package_author_email': 'camilo@cloudescape.com', 'npm_config_link': '', 'npm_package_name': 'inotify', 'npm_config_userconfig': '/home/james/.npmrc', 'npm_package_scripts_install': 'node-waf configure build', 'npm_config_dev': '', 'SSH_CLIENT': '192.168.1.170 57759 22', 'npm_config_npaturl': 'http://npat.npmjs.org/', 'LOGNAME': 'james', 'PATH': '/usr/bin:/usr/lib/nodejs/npm/bin/node-gyp-bin:/home/james/dev/perv/node_modules/inotify-plusplus/node_modules/inotify/node_modules/.bin:/home/james/dev/perv/node_modules/inotify-plusplus/node_modules/.bin:/home/james/dev/perv/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/etc/dhmedia/scripts/bin:/etc/dhmedia/scripts/bin/DIP:/etc/dhmedia/scripts/bin/module:/var/lib/gems/1.8/bin:/usr/local/zend/bin:/home/james/.local/bin', 'npm_package_contributors_5_name': 'Alexander Makarenko', 'npm_config_coverage': '', 'TERM': 'xterm', 'XDG_SESSION_COOKIE': 'ed64705a24f25350b1613cea0000049b-1353384818.35773-1028046917', 'npm_config_onload_script': '', 'npm_config_description': 'true', 'npm_config_sign_git_tag': '', 'npm_config_fetch_retry_mintimeout': '10000', 'npm_config_viewer': 'man', 'npm_config_fetch_retries': '2', 'npm_config_globalignorefile': '/usr/etc/npmignore', 'npm_config_cache_max': 'null', 'npm_config_proprietary_attribs': 'true', 'npm_package_contributors_4_email': 'mschuylerb at gmail.com', 'npm_package_version': '1.1.0', 'npm_config_https_proxy': '', 'npm_config_node_version': 'v0.8.12', 'npm_config_init_author_email': '', 'OLDPWD': '/home/james/dev', 'NODE_PATH': '/usr/lib/nodejs:/usr/share/javascript', 'PWD': '/home/james/dev/perv/node_modules/inotify-plusplus/node_modules/inotify', 'npm_config_cache_min': '', 'GEM_HOME': '/home/james/.local/lib/ruby/gems/1.8'}
files = []
hash = 0
options = {'compile_targets': None, 'force': False, 'verbose': 0, 'nocache': False, 'progress_bar': 0, 'destdir': '', 'keep': False, 'zones': '', 'blddir': '', 'prefix': '/usr/local/', 'exe': False, 'jobs': 2, 'srcdir': '', 'check_cxx_compiler': 'g++ icpc sunc++'}
srcdir = '/home/james/dev/perv/node_modules/inotify-plusplus/node_modules/inotify'
